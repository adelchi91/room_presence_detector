name: Drift Detection and Retraining

on:
  push:
    branches:
      - main
      - master

jobs:
  detect_and_retrain:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Run Drift Detection
        run: python drift_detection_script.py

      - name: Check Drift Status
        id: check_drift
        run: |
          echo "drift_detected=$(python -c "print('true' if '$(cat drift_detection_result.txt)' == 'Yes!' else 'false')")" >> $GITHUB_ENV
        # run: echo "::set-output name=drift_detected::$(python -c "print('true' if '$(cat drift_detection_result.txt)' == 'Yes!' else 'false')")"

      - name: Check Drift Script Result
        id: check_drift_result
        run: |
          echo "retraining=$(python -c "print('true' if '$(cat retraining_result.txt)' == 'Yes!' else 'false')")" >> $GITHUB_ENV

      - name: Retrain Model (if drift detected)
        if: env.retraining == 'true'
        # steps.check_drift.outputs.drift_detected == 'true'
        run: python model.py

      - name: Commit Changes
        run: |
          git config --global user.email "asta.adelchi@gmail.com"
          git config --global user.name "adelchi91"
          # Check if there are changes before committing
          if [[ -n $(git diff --exit-code) ]]; then
            git add .
            git commit -m "Automated update due to drift detection"
            git push https://adelchi91:${{ secrets.GITHUB_TOKEN }}@github.com/adelchi91/room_presence_detector.git
          else
            echo "No changes detected. Skipping commit."
          fi


      - name: Build and Push Docker Image
        if: env.retraining == 'true'
        run: |
          docker build -t testing_image -f Dockerfile .
          # docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]
          docker tag testing_image adelchijacques/room_presence_classifier:room_presence_new
          docker login -u adelchijacques -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker push adelchijacques/room_presence_classifier:room_presence_new

      - name: Configure AWS credentials
        if: env.retraining == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1  
          ecs-cluster: room_detection_cluster  # Replace with your ECS cluster name
          app-name: room_detection_task  # 
          container-image-name: adelchijacques/room_presence_classifier:room_presence_new

      - name: Create ECS Cluster for Fargate
        if: env.retraining == 'true'
        run: |
          aws ecs create-cluster --cluster-name room_detection_cluster


      # AWS Fargate is often referred to as a "serverless compute engine for containers" because it allows you to run containers
      # without managing the underlying infrastructure, server provisioning, or scaling.
      # Developers can focus on defining and running containerized applications without the need to worry about the details of server
      # provisioning, scaling, or management, thus simplifying the deployment and operational aspects of containerized workloads.
      - name: Create ECS task definition for Fargate
        if: env.retraining == 'true'
        # Description of the json file in the run command below:
        # family: Organizes task definitions into groups, allowing for better management of different versions or purposes.
        # executionRoleArn: Specifies the IAM role that grants permissions for ECS tasks to interact with other AWS services.
        # networkMode: Defines the networking mode for the task. In Fargate, awsvpc is commonly used for better isolation and security.
        # - family:
        #   Purpose: The family parameter is used to identify the family name for the task definition. 
        #            A family groups multiple revisions of a task definition together.
        #   Explanation: The family is a way to categorize different versions or revisions of a task definition
        #                that share a common purpose or application. It allows you to organize and manage revisions of a task
        #                definition in a more structured manner. For example, you might have a family for a web server, and each
        #                revision within that family represents a different version of the web server task definition.
        # - executionRoleArn:
        #            Purpose: The executionRoleArn parameter specifies the Amazon Resource Name (ARN) of the IAM role that the
        #                     Amazon ECS container agent and the Docker daemon can assume.
        #            Explanation: The execution role grants necessary permissions for tasks running on ECS. It allows the ECS
        #                         service to communicate with other AWS services or resources, such as pulling Docker images from
        #                         Amazon ECR (Elastic Container Registry) or accessing data stored in an S3 bucket.
        # - command:
        #           The script creates an HTML file with a congratulatory message and then starts the Apache HTTP server in the
        #           foreground. The Apache server will serve the HTML content when accessed.
        #           This setup is often used as a placeholder or default content for a web server running in a container.
        # - networkMode Parameter:
        #           Purpose: The networkMode parameter specifies the networking mode to use for the task. In Fargate, the awsvpc mode
        #           is commonly used.
        #           Explanation: The networking mode determines how networking is configured for containers within the task. 
        #           awsvpc (Amazon VPC) mode provides each task with its own network namespace, including its own elastic network interface (ENI).
        #           This mode is recommended for Fargate tasks as it offers better isolation and security.
        # - essential: Indicates whether the task should stop if the container fails.
        run: |
          aws ecs register-task-definition --cli-input-json file://.github/workflows/fargate_task_definition.json

      - name: Create and deploy ECS Service for Fargate
        if: env.retraining == 'true'
        # --desired-count 1: Sets the desired number of tasks to run in the service. In this case, it's set to 1.
        # --network-configuration: the awsvpcConfiguration part, defines how the ECS service interacts with the network:
        #     - It specifies the Virtual Private Cloud (VPC) configuration, indicating the overall networking setup for the
        #       ECS service.
        #     - It identifies the specific subnet within the VPC where the tasks associated with the ECS service will be launched.
        #     - It enables the assignment of public IP addresses to the tasks, allowing them to communicate with the internet.
        run: |
          CLUSTER_NAME="room_detection_cluster"
          SERVICE_NAME="room_detection_service"
          TASK_DEFINITION="room_detection_task"

          # Check if the service already exists
          if ! aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$SERVICE_NAME" --query 'services' --output text; then
            # If the service doesn't exist, create it
            aws ecs create-service \
              --cluster "$CLUSTER_NAME" \
              --service-name "$SERVICE_NAME" \
              --task-definition "$TASK_DEFINITION" \
              --desired-count 1 \
              --launch-type "FARGATE" \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-0cea37d63b492f3c2],assignPublicIp=ENABLED}"
          else
            # If the service already exists, update it
            # aws ecs update-service \
            #   --cluster "$CLUSTER_NAME" \
            #   --service "$SERVICE_NAME" \
            #   --task-definition "$TASK_DEFINITION"
            aws ecs create-service \
              --cluster "$CLUSTER_NAME" \
              --service-name "$SERVICE_NAME" \
              --task-definition "$TASK_DEFINITION" \
              --desired-count 1 \
              --launch-type "FARGATE" \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-0cea37d63b492f3c2],assignPublicIp=ENABLED}"  
          fi



# - name: Create and deploy ECS Service for Fargate
#   if: env.drift_detected == 'true'
#   run: |
#     aws ecs create-service --cluster room_detection_cluster --service-name room_detection_service --task-definition room_detection_task --desired-count 1 --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=[subnet-0cea37d63b492f3c2],assignPublicIp=ENABLED}"



      # - name: Deploy ECS Service for Fargate
      #   if: env.drift_detected == 'true'
      #   run: aws ecs update-service --cluster room_detection_cluster --service custom_service_name --task-definition room_detection_task



# https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_AWSCLI_Fargate.html

# aws ecs create-cluster --cluster-name room_detection_cluster
# # aws ecs describe-clusters --clusters room_detection_cluster # only to check if cluster exists 
# aws ecs register-task-definition --cli-input-json file:///home/adelchiasta/Notebooks/Interview/Covestro/fargate_task_definition.json
# # To find the correct subnet IDs, you can use the following command:
# # aws ec2 describe-subnets --query 'Subnets[*].{ID:SubnetId,AvailabilityZone:AvailabilityZone}'
# aws ecs create-service --cluster room_detection_cluster --service-name room_detection_service --task-definition room_detection_task --desired-count 1 --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=[subnet-0cea37d63b492f3c2],assignPublicIp=ENABLED}"
# # aws ecs describe-services --cluster room_detection_cluster --services room_detection_service # Describe the Running Service, If successful, this will return a description of the service failures and services. 

# eni-04560f9438b890f1d



















#       # #             --task-role-arn arn:aws:iam::123456789012:role/your-task-role-arn \
#       #               # "networkMode": "awsvpc",
#       - name: Create ECS Task Definition for Fargate
#         if: env.drift_detected == 'true'
#         run: |
#           aws ecs register-task-definition \
#             --requires-compatibilities FARGATE \
#             -- networkMode awsvpc \
#             --cpu 256 \
#             --memory 512 \
#             --execution-role-arn arn:aws:iam::381492110778:role/ecsTaskExecutionRole \
#             --container-definitions '[{
#               "name": "room_presence_classifier",
#               "image": "adelchijacques/room_presence_classifier:room_presence_new",
#               "memory": 512,
#               "cpu": 256,
#               "essential": true,
#               "requiresCompatibilities": [
#                                             "FARGATE"
#                 ],
#               "portMappings": [
#                     {
#                         "containerPort": 80,
#                         "hostPort": 80,
#                         "protocol": "tcp"
#                     }
#                 ],
#               "logConfiguration": {
#                 "logDriver": "awslogs",
#                 "options": {
#                   "awslogs-group": "/ecs/room_presence_classifier",
#                   "awslogs-region": "eu-west-1",
#                   "awslogs-stream-prefix": "ecs"
#                 }
#               }
#             }]'\
#             --family room_detection_task

# - name: Create ECS Task Definition for Fargate
#   if: env.drift_detected == 'true'
#   run: |
#     aws ecs register-task-definition \
#       --family room_detection_task \
#       --requires-compatibilities FARGATE \
#       --cpu 256 \
#       --memory 512 \
#       --execution-role-arn arn:aws:iam::381492110778:role/ecsTaskExecutionRole \
#       --container-definitions '[{
#         "name": "room_presence_classifier",
#         "image": "adelchijacques/room_presence_classifier:room_presence_new",
#         "memory": 512,
#         "cpu": 256,
#         "essential": true,
#         "logConfiguration": {
#           "logDriver": "awslogs",
#           "options": {
#             "awslogs-group": "/ecs/room_presence_classifier",
#             "awslogs-region": "eu-west-1",
#             "awslogs-stream-prefix": "ecs"
#           }
#         }
#       }]'\
#       --family room_detection_task




#       # aws ecs register-task-definition \
#       #   --container-definitions '[{"name":"room_presence_classifier","image":"adelchijacques/room_presence_classifier:room_presence_new","memory":512}]' \
#       #   --family room_detection_task

#       # # haven't created an ECS service separately, you can use the aws ecs run-task command to run a one-off task 
#       # - name: Run ECS Task
#       #   if: env.drift_detected == 'true'
#       #   run: | 
#       #     aws ecs run-task --cluster room_detection_cluster --task-definition room_detection_task --region eu-west-1 

#       # - name: Create ECS Service for Fargate
#       #     if: env.drift_detected == 'true'
#       #     run: |
#       #       CLUSTER_NAME="room_detection_cluster"
#       #       SERVICE_NAME="room_detection_service"
#       #       TASK_DEFINITION="room_detection_task"  # Replace with your actual task definition

#       #       # Check if the service already exists
#       #       if ! aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$SERVICE_NAME" --query 'services' --output text; then
#       #         # If the service doesn't exist, create it
#       #         aws ecs create-service \
#       #           --cluster room_detection_cluster \
#       #           --service-name custom_service_name \
#       #           --task-definition room_detection_task \
#       #           --desired-count 1
#       #       else
#       #         echo "Service $SERVICE_NAME already exists."
#       #       fi


